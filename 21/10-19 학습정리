* Interface
* Exception 
* javax.swing
=======================================

* Interface 인터페이스란 ? 
  1) 여러 객체들을 구성할 때 객체들 간의 공통적인 부분(*기능, 동작)들을 추상화(추출) 하여 명시하고 기능과 동작들의 규격(규칙)을 정리한 설계도이다.
  2) 객체지향 부분 중 다형성을 극대화 하기 위해 사용
  3) 인터페이스는 interface 라는 keyword를 사용해 정의한다 예) public interface Inter{} // 접근제한자로 public , default를 쓸 수 있다.
  4) 인터페이스의 변수는 [ public static final ] 이 생략된 상수 선언과 [ abstract ] 생략된 추상메서드만 선언만 포함할 수 있다.
  ※ 인터페이스도 class, enum, annotaion 처럼 .java파일로 작성되고, 컴파일러를 통해 .class파일로 컴파일 된다.
  ※ 인터페이스도 접근지정자로 public으로 하면 어디서든 사용가능하며 public을 생략하면 같은 패키지내에서만 사용가능하다.
  ★ 인터페이스는 참조타입 변수로 타입선언은 할 수 있지만 객체 생성은 할 수 없다(생성자도 x) !!
  ※ interface는 상수 필드, 추상 메서드, 디폴트 메서드, 정적 메서드를 구성 멤버로 가집니다.

    => 예) public interface Inter{
            [public static final] int number; 
            [abstract public]     void run();
        }
    => 이렇게 인터페이스 내부에서는 구현되는 코드는 없다.
    => 하지만 자바 8버전 이후부터 default, static 메서드가 인터페이스에 추가되었다.
    => default 메서드는 인터페이스 내부에서 구현될 수 있으며, 선택적으로 오버라이딩을 할수 있고 default 키워드는 반드시 명시해야한다.
       예) public interface Phone{
                int VERSION = 12;
                String getManfacture();
                String getOS();
                
                * default void printRing(){
                    System.out.println("Sound : Ring Ring~~");
                }
            }
     => 또한 default 메서드와 마찬가지로 static method도 추가되었으며, 인스턴스 생성 없이 인터페이스이름으로 직접 메서드를 호출할 수 있다.
     => static method는 인터페이스를 구현하는 클래스에서 재정의 즉 오버라이딩을 할수 없다.
        예) public interface Phone {
                  int VERSION = 12;
                  String getManfacture();
                  String getOS();
                  
                  default void printRing(){
                      printInfo();
                      System.out.println("Sound : Ring Ring~~");
                  }
                  static void printUser(){                   => static 메서드 호출 : Phone.printUser();
                       // static private 메소드 사용
                      getUser(user); // static 메서드는 static 메서드 안에서만 호출 가능하다 !!
                      System.out.println("User : "+user);                 
                  }
                  * private void printInfo(){
                     System.out.println("Print Information");
                  }

                  * private static void getUser(String user){
                      System.out.println("User : "+user);
                  }
                 
            }
       => 위에서 말했듯이 자바 8 이후부터 인터페이스 내부에서 코드를 구현하는 것이 추가되었고 
       => 코드 구현시, 복잡한 코드를 한번에 구현하는 것보다는 작은 메서드를 작성하여 복잡한 메서드를 구현하는것이 재사용, 유지보수 측면에서 효율적이다.
       => default, static메서드와 마찬가지로 private 메서드도 인터페이스에서 구현할 수 있으며 
       => private 메서드를 이용하여 작은 메서드를 구현하되 외부에서 볼수 없고 사용할수 없도록 하는 메서드
       
     5) 인터페이스의 구현은 implements 키워드를 통해 특정된 기능을 규약해 놓은 인터페이스를 구현 할 필요가 있는 클래스에서 구현한다.
        => 하나라도 추상메서드를 구현하지 않으면 구현하는 클래스를 추상클래스로 선언되어야한다.
        예 ) public class Iphone implements Phone{
                @Override
                publid void String getManfacture(){
                    return Apple;
                };
                @Override
                public void String getOS(){
                    return MacOs;
                };
                @Override
                public void printRing() {  ==> Phone 인터페이스에서 default로 만든 메서드를 iphone 클래스에서 재정의!!
                    System.out.println("Sound : Ring~~~~~~~");
                }
        
          }
     
     6) 자바에선 클래스는 단일 상속만이 원칙이다. 하지만 인터페이스는 다중 상속이 가능하다.
       => 여러 인터페이스를 상속 받아 하나의 인터페이스로 만들 수 있다.
       => 다중상속이 된 인터페이스를 구현하는 클래스는 모든 추상메서드를 오버라이딩 해야한다 !!
       => 인터페이스 상속도 extends 키워드를 사용하여 상속한다.
 
          public interface Phone {
              int version = 12;

              String getManufacturer();
              String getOS();
          }
          public interface Watch{
              String getAppearance();
          }
          public interface Device extends Phone, Watch{
              void run();
          }
          public class Machine implements Device{
                @Override
                String getManufacturer(){}
                
                @Override
                String getOS(){}
                
                @Override
                String getAppearance(){};
                
                @Override
                 void run(){};
          
          }
 
        7) 익명 구현 객체 (Anonymous Implement Object)
          -> 구현 클래스를 만들어 사용하는 것이 일반적이며 재사용이 가능하다 하지만 일회성으로 사용하는 구현클래스는
          -> 클래스로 만들어서 선언해서 쓰는 것이 비효율적이다.
          -> 이 것을 개선하기 위해 익명 구현 객체이며 임시 작업 쓰레드를 만들기 위해 활용된다.
          -> 원래는 new 키워드 뒤에 인터페이스 구현 클래스 이름이 와야 하는데 익명 구현 객체의 경우
          -> 참조할 구현 클래스가 없기 떄문에 User 인터페이스 이름을 그대로 사용한다.
          -> 단 익명 구현 객체의 구현 부에는 인터페이스의 추상메서드가 아닌 실체메서드를 선언해야한다.
          User user = new User() { 
              public String sendMoney(Money money) { 
                thirdpartyApi.send(money.getType(), money.getAmount()); 
                return Status.SUCCESS.name(); 
              } 
            @Override public default void setStatus(Status status) { 
                if(status == Status.ACTIVE) { 
                  System.out.println("수취인이 활성화 되었습니다"); 
                  return;
                  
                } System.out.println("수취인이 비활성화 되었습니다"); 
              }
        => 익명 구현 객체를 사용한다고 해서 클래스가 생성되지 않는 것이 아니다.
        => 익명 구현 객체가 사용된 자바 파일을 컴파일 하면 자동으로 익명 구현 객체의 클래스 파일이 생성된다.
        => 익명 구현 클래스 파일의 이름은 
        => [익명 구현 객체가 사용된 자바 파일]$[번호].class (번호는 1부터 시작되 증가)
====================================================================================================
* Exception 예외 처리 (자바스크립트, PL/SQL 에서도 예외처리에대한 개념이 있다)
  -> 오류(ERROR) : 시스템에 비정상적인 상황이 생겼을 때 발생하며 이는 시스템 레벨에서 발생하기 때문에
      심각한 수준의 오류이다 따라서 개발자가 미리 예측해 오류를 처리할 수 없기 떄문에
      애플리케이션에서 오류에 대한 처리를 신경쓰지 않아도 된다.
      
     예외(Exception) : 그렇다면 예외란 개발자가 구현한 로직(소스코드)에서 발생하며, 즉 예외가 발생할
        상황을 미리 예측해 처리할 수 있다. 따라서 예외는 개발자가 처리할 수 있기 떄문에 예외가 발생시
        무슨 예외인지 구분하고 파악하여 그에 따른 처리 방법을 알고 예외처리를 해야한다.
        -> 간단히 말해 프로그램이 진행하는 과정에서 발생할 수 있는 상활들을 미리 정해놓고 
           해당하는 예외가 발생했을 경우 적절한 조치를 취해 프로그램이 정상적으로 작동하도록 하기 위함
        -> 존재하지 않는 파일을 오픈 한다던가, 설정되지 않은 객체의 메서드를 호출하려는 경우 발생
           
   ★ 예외처리에도 방법이 존재한다
    1) Handle하는 방법 : 직접 처리하는 방법 , try ~ catch 절을 이용
      -> try {
            jvm이 발생하는 오류코드를 던진다. -- 야구와 비교
         } catch (해당 예외 클래스 e) {
            jvm이 던진 오류코드를(야구공)을 캐치해(잡아) 해결하는 코드를 작성한다.
              예외 처리 코드
         }
      ※ Exception(예외) 클래스 (상속)구조 
            Object 
              |
            Throwable
             |    |
          error  Exception (Throwable 클래스를 상속받고 있는 클래스)
                   |
                  RuntimeException ( Exception클래스로부터 상속받는 예외처리 관련 클래스)
                      +----- ArrayIndexOutOfBoundsException 클래스
                      +----- NullPointerExcepion 클래스
                      +----- ArithmeticException 클래스
         예) String fruits[] = {"사과","토마토","배","샤인머스캣"}; 
            try {
                for(int i=0; i<5; i++){
                       --> 배열의 담긴 항목은 4개인데 5로 접근했기 떄문에 발생한 예외
                    System.out.println(fruits[i]);               
                }
              } catch (ArrayIndexOutOfBoundsException e){
                  System.out.println("배열 인덱스 범위가 초과됨 수정하셈");
                  --> catch문은 여러개 올수 있으며 여러 Exception 발생할 경우 각각 처리한다.
              }
              System.out.println("##반드시 실행되어야 할 코드");
          => 실행 결과  -> i의 값이 4가 되면 예외가 발생되어 catch문으로 던져지며
            사과        -> 예외의 종류를 확인해 그에 맞게 처리를 하고 
            토마토      -> for문 밖에서 try ~ catch절을 묶었기 때문에 for문의 실행이 종료되고
            배          -> 반드시 실행되어야 할 코드가 출력된다.
            샤인머스캣
            배열 인덱스 범위가 초과됨 수정하셈
            ##반드시 실행되어야 할 코드
            
            for(int i =1; i<=5;i++) {
                try {//반복문 안쪽에 예외처리를 하면 계속 진행하고 조건이 다되면 벗어남
                  int x = 50/(i-3);
                  System.out.println("x :" + x);
                  } catch (ArithmeticException e) {
                    //For example, an integer "divide by zero" 
                    //정수를 0으로 나눠서 나는 오류
                    System.out.println();
                  }
                }
                System.out.println("예외처리 끝");
             => 이렇게 for문 안에서 예외처리를 하게 되면 예외가 발생된 시점에 예외 코드를 catch에 던져 
             => 처리를 해준 다음 마저 for루프를 마저 실행하여 값을 출력 후 종료되고 "예외 처리 끝"을 출력한다.
             => 실행결과  
                -25
                -50
                catch문에 작성한 예외처리 
                25 *
                50 *
                예외처리 끝
          
          ※ 만약 여러개의 예외가 발생 할 경우
              try 절은 1개 catch절은 여러개 올 수 있다.
                try {
                } catch (A a){
                } catch (B b) {
                } catch (C c) {
                    System.exit(0); -- finally 앞에 있다면 catch(C c) {}실행후 finally을 안거치고 종료
                } finally {
                   * finally { body } 는 반드시 한번은 수행하는 블럭이다 !
                     단독으로 사용불가하다. try ~ finally 가능
                     finally 앞에 return 문이 있더라도 반드시 수행하고 제어권을 넘긴다.
                     단, 예외가 있다. System.exit(0) 시스템 종료코드가 앞에 있을 경우 수행되지 않는다.
                     System.exit(0) = > 자바 프로그램만 종료시킴
                     
                }
                * 여러 개 예외 발생시 주의 사항
                  -> Exception 이 부모, 자식의 상속관계가 있을 경우
                  -> 자식 예외처리를 먼저 catch 하고 부모 예외를 나중에 catch한다.
                  
               예) 
               String str = JOptionPane.showInputDialog("정수를 입력하세요");
		           System.out.println("입력 값 : " + str);
		
                try {
                  int num = Integer.parseInt(str);
                  int x = 50/num;
                  System.out.println("결과 값 x : " + x);

                  String str2 = null;
                  char ch = str2.charAt(0);
                  System.out.println(ch);

                } catch(NumberFormatException e) {
                  System.out.println("문자(열)는 숫자로 변환이 안되요!!");
                  return;
                  /* 만약 이 catch(NumberFormatException e){} 영역에 
                   * => catch(Exception e){} 로 바꾸면 error 난다.
                   * => Exception 모든 예외처리 클래스에 부모이며 
                   * => NumberFormatException, ArithmeticException 두 예외를
                   * => 다 처리하기 때문에 아래에서 자식 예외처리 catch 문을 쓰면 error가 나므로
                   * => 자식 예외처리 부터 해주고 필요할 경우 부모 예외처리를 해준다.
                   * */
                } catch (ArithmeticException  e) {
                  System.out.println("숫자를 0으로 나누면 안됩니다!!");
                  System.exit(0); //정상이면 0을 넣어주고 에러가 발생해서 종료하려면 음수
                  //이때는 finally를 안거치고 바로 프로그램 종료

                } catch (Exception e) {
                  System.out.println("기타 예상치 못한 예외발생 " + e);
                  //e --> 해당 객체(e)의 toString()메서드가 자동으로 출력 발생된 예외클래스 반환
                } finally {
                  //단독으로 사용 불가, try ~ finally 가능
                  System.out.println("반드시 실행해야할 코드들");
                }
                System.out.println("~~~~the end~~~~");
                
                
                
           
                
    
    2) Declare 하는 방법 : 선언하는 방법 , throws절을 이용






 
 
