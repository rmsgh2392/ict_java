#사용자 정의 예외(User-Defined Exceptions)    
 

◈ 오라클 저장함수 RAISE_APPLICATION_ERROR를 사용하여 오류코드
  -20000부터  -20999의 범위 내에서 사용자 정의 예외를 만들수 있습니다. 

1단계			2단계			3단게	
declare	->	raise		->	reference
선언부		실행부		예외 처리부
 

◈ STEP 1 : 예외의 이름을 선언(선언절) 
◈ STEP 2 : RAISE문을 사용하여 직접적으로 예외를 발생시킨다(실행절) 
◈ STEP 3 : 예외가 발생할 경우 해당 예외를 참조한다(예외절) 
 
 
---사용자 정의 예외 예제 Procedure ---------------------------

입력한 부서의 사원이 5명보다 적으면 사용자 정의 예외가 발생하는 예제.

SQL>CREATE OR REPLACE PROCEDURE User_Exception 
        (v_deptno IN emp.deptno%type ) 
      IS

       -- 예외의 이름을 선언
       user_define_error EXCEPTION;     -- STEP 1
       cnt     NUMBER;

     BEGIN

       DBMS_OUTPUT.ENABLE;   

       SELECT COUNT(empno) 
       INTO cnt
       FROM emp
       WHERE deptno = v_deptno;

       IF cnt < 5 THEN
         -- RAISE문을 사용하여 직접적으로 예외를 발생시킨다
          RAISE user_define_error;         -- STEP 2
       END IF;

      EXCEPTION
        -- 예외가 발생할 경우 해당 예외를 참조한다.
       WHEN user_define_error THEN      -- STEP 3
           RAISE_APPLICATION_ERROR(-20001, ’부서에 사원이 몇명 안되네요..’);

   END; 
  /


프로시져가 생성되었습니다. 

실행 결과 
SQL> SET SERVEROUTPUT ON ; -- (DBMS_OUTPUT.PUT_LINE을 출력하기 위해 사용)

SQL> EXECUTE user_exception(10);
BEGIN user_exception(10); END;
 *
1행에 오류:
ORA-20001: 부서에 사원이 몇명 안되네요..
ORA-06512: "SCOTT.USER_EXCEPTION", 줄 17에서
ORA-06512: 줄 1에서

 10부서의 사원이 5보다 적기 때문에 사용자 정의 예외가 발생했습니다.

SQL> EXECUTE user_exception(20);
PL/SQL 처리가 정상적으로 완료되었습니다. 

20부서로 실행을 하면 에러가 발생하지 않는 것 을 알 수 있습니다..
/////////////////////////////////////////////////////
SQLCODE, SQLERRM 
 
◈WHEN OTHERS문으로 트랩(Trap)되는 오류들의 실제 오류 코드와 설명을 볼때 사용한다. 

◈ SQLCODE : 실행된 프로그램이 성공적으로 종료하였을때는 오류번호 0을 포함하며, 
              그렇지 못할 경우에는 해당 오류코드 번호를 포함한다. 

◈ SQLERRM: SQLCODE에 포함된 오라클 오류 번호에 해당하는 메시지를 가진다. 
--------------------------------------------------------
SQLCODE Value  |	 Description
 ---------------+------------------------------------
	0	       |	오류 없이 성공적으로 종료  
	1	       | 사용자 정의 예외 번호  
	+100	       |NO_DATA_FOUND 예외 번호 
	음수	       |위에 것을 제외한 오라클 서버 에러 번호  
--------------------------------------------------------
 
SQLCODE, SQLERRM 예제 프로시저

SQL> CREATE OR REPLACE PROCEDURE Errcode_Exception 
        (v_deptno IN emp.deptno%type ) 
        IS

         v_emp   emp%ROWTYPE ;  

        BEGIN  

          DBMS_OUTPUT.ENABLE;

          -- ERROR발생 for문을 돌려야 됨
         SELECT * 
         INTO v_emp
         FROM emp
         WHERE deptno = v_deptno;
      
        DBMS_OUTPUT.PUT_LINE(’사번 : ’ || v_emp.empno);    
        DBMS_OUTPUT.PUT_LINE(’이름 : ’ || v_emp.ename);    
          
     EXCEPTION
      
      WHEN OTHERS THEN

          DBMS_OUTPUT.PUT_LINE(’ERR CODE : ’ || TO_CHAR(SQLCODE));
          DBMS_OUTPUT.PUT_LINE(’ERR MESSAGE : ’ || SQLERRM);

  END;  
  /


프로시져가 생성되었습니다. 

실행 결과 
SQL> SET SERVEROUTPUT ON ; -- (DBMS_OUTPUT.PUT_LINE을 출력하기 위해 사용)

SQL> EXECUTE Errcode_Exception(30);
RR CODE : -1422
ERR MESSAGE : ORA-01422: 실제 인출은 요구된 것보다 많은 수의 행을 추출합니다

PL/SQL 처리가 정상적으로 완료되었습니다.

위와 같이 SQLCODE, SQLERRM을 사용하면 에러 코드와 에러 메시지를 볼 수 있습니다.

//////////////////////////////////////////////////////////

# FUNCTION
- 실행환경에 반드시 하나의 값을 
   RETURN하기 위해 PL/SQL함수를 사용한다.
- 함수 선언에서 DATATYPE이 있는 
  RETURN절을 추가하고, PL/SQL블럭에
  적어도 한 개 이상의 RETURN문을 포함한다.
- PARAMETER에서 사용하는 IN, OUT,IN OUT 는 
   PROCEDURE에서 사용한
  것과 동일하게 사용 가능하나 
  대부분 IN을 사용한다.

- 구문----------------------------------------------------------
	CREATE [OR REPLACE] FUNCTION function_name
	[(arg1 [mode1] datatype [{:= | default} expression]
	[,arg2 [mode2] datatype [{:= | default} expression],....])]

	RETURN data_type
	{IS | AS}
	BEGIN
		PL/SQL_BLOCK;
	END;
	----------------------
	function_name: 함수명
	mode1	   : IN(입력 매개변수), OUT(출력 매개변수), IN OUT (입출력 매개변수)
	data_type	   : 반환되는 값의 데이터타입
--------------------------------------------------------------

-FUNCTION 실행 구문-------------------------------------------
	output_variable := function_name[(args1[,args2,...])]
--------------------------------------------------------------
==[실습]=======================================================
create or replace function getNo(
v_ename in emp.ename%type)
return number
is
v_deptno emp.deptno%type;
begin
	select deptno into v_deptno
   from emp where ename=upper(v_ename);
dbms_output.put_line('부서번호: '||to_char(v_deptno));
return v_deptno;

exception
when no_data_found then
dbms_output.put_line('입력한 사원은 없어요');
when too_many_rows then
dbms_output.put_line('자료가 2건 이상이에요');
when others then
dbms_output.put_line('기타 에러입니다');

end;
/
-----------------------------------------------
실행
set serveroutput on
var g_deptno number
execute :g_deptno :=getNo('scott')
부서번호: 10

print g_detpno

g_deptno
--------
	10
=======================================================

#Package(패키지) 
 
package?

  ◆ 패키지(package)는 오라클 데이터베이스에 
      저장되어 있는 
      서로 관련있는 PL/SQL 
      프로지져와 함수들의 집합 입니다
  ◆ 패키지는 선언부와 본문 두 부분으로 
      나누어 집니다. 


패키지 

- 선언절은 패키지에 포함될 PL/SQL 프로시저나, 
   함수, 커서, 변수, 예외절을 선언 합니다. 
- 패키지 선언부에서 선언한 모든 요소들은 
  패키지 전체에 적용됩니다. 
- 즉 선언부에서 선언한 변수는
   PUBLIC 변수로 사용 됩니다. 

 선언부


패키지 

- 패키지 본문은 패키지에서 선언된 부분의 실행을 정의 합니다. 
- 즉 실재 프로시져나 함수의 내용에 해당하는 부분이 옵니다.


#패키지 실습====================================================
create or replace package empInfo as
procedure allEmp;
procedure allSal;
end empInfo;
/
패키지가 생성되었습니다.
-------------------------------
create or replace package body empInfo as
procedure allEmp
is
cursor empCr is
select empno,ename,to_char(hiredate,'RRRR/MM/DD') hiredate
from emp order by hiredate;
begin
for k in empCr loop
dbms_output.put_line('사번'||k.empno);

dbms_output.put_line('이름'||k.ename);

dbms_output.put_line('입사일'||k.hiredate);

end loop;
exception
when others then
dbms_output.put_line(SQLERRM||'에러발생');

end allEmp;


procedure allSal
is
cursor salCr is
select round(avg(sal),3) avg_sal, max(sal) mx,
min(sal) mn from emp;
begin
for k in salCr loop

dbms_output.put_line('전체급여평균: '||k.avg_sal);

dbms_output.put_line('최대급여금액: '||k.mx);

dbms_output.put_line('최소급여금액: '||k.mn);

end loop;
end allSal;
end empInfo;
/
패키지 본문이 생성되었습니다.
---------------------------------------------

실행
set serveroutput on
exec empInfo.allEmp;
exec empInfo.allSal;
=========================================================
////////////////////////////////////////////////////////////////////// 
Trigger(트리거) 
 
트리거란?
◆ INSERT, UPDATE, DELETE문이 TABLE에 대해 행해질 때 
   묵시적으로 수행되는 PROCEDURE 입니다.
◆ Trigger는 TABLE과는 별도로 DATABASE에 저장됩니다.
◆ Trigger는 VIEW에 대해서가 아니라 TABLE에 관해서만 
   정의될 수 있습니다. 

--구문----------------------------------------
create [or replace] trigger triger_name
{BEFORE | AFTER} trigger_event [OF column1,...]
ON table_name
[FOR EACH ROW [WHEN trigger_condition]]
trigger_body;
------------------------------------------------

- BEFORE : INSERT, UPDATE, DELETE문이 실행되기 전에 
	트리거가 실행됩니다. 
- AFTER : INSERT, UPDATE, DELETE문이 실행된 후 
	트리거가 실행됩니다. 
- trigger_event : INSERT, UPDATE, DELETE 중에서 
	한 개 이상 올 수 있습니다. 
- FOR EACH ROW : 이 옵션이 있으면 행 트리거가 됩니다. 

-- 행 트리거 : 컬럼의 각각의 행의 데이터 행 변화가 
		생길때마다 실행되며, 
		그 데이터 행의 실제값을 제어할수 있습니다. 
-- 문장 트리거 : 트리거 사건에 의해 단 한번 실행되며, 
		컬럼의 각 데이터 행을 제어할수 없습니다. 


 
간단한 행 트리거 예제----------------------

SQL>CREATE OR REPLACE TRIGGER triger_test
BEFORE
UPDATE ON dept
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE(’변경 전 컬럼 값 : ’ || : old.dname);
DBMS_OUTPUT.PUT_LINE(’변경 후 컬럼 값 : ’ || : new.dname);
END;
/
------------------------------------------------
#데이터사전에서 트리거 조회
SELECT TRIGGER_TYPE, TRIGGER_NAME, TRIGGERING_EVENT
FROM USER_TRIGGERS

#트리거 삭제
DROP TRIGGER trigger_name;

#트리거 비활성화 
ALTER TRIGGER trigger_name DISABLE

#트리거 활성화
ALTER TRIGGER trigger_name ENABLE
--------------------------------------------------=

SQL> SET SERVEROUTPUT ON ; -- (DBMS_OUTPUT.PUT_LINE을 출력하기 위해 사용)

-- UPDATE문을 실행시키면.. 
SQL>UPDATE dept
SET dname = ’총무부’
WHERE deptno = 30

-- 트리거가 자동 실행되어 결과가 출력됩니당. 
변경 전 컬럼 값 : 인사과
변경 후 컬럼 값 : 총무부

1 행이 갱신되었습니다.
 
 
 
간단한 행 트리거 예제2 (PLSQL BLOCK이 있는 트리거)

SQL>CREATE OR REPLACE trigger sum_trigger
BEFORE
INSERT OR UPDATE ON emp
FOR EACH ROW

DECLARE

-- 변수를 선언할 때는 DECLARE문을 사용해야 합니다 
avg_sal NUMBER;

BEGIN

SELECT ROUND(AVG(sal),3)
INTO avg_sal
FROM emp;

DBMS_OUTPUT.PUT_LINE(’급여 평균 : ’ || avg_sal);

END; 
/

트리거가 생성되었습니다.

SQL> SET SERVEROUTPUT ON ; -- (DBMS_OUTPUT.PUT_LINE을 출력하기 위해 사용)

-- INSERT문을 실행합니다..

SQL> INSERT INTO EMP(EMPNO, ENAME, JOB, HIREDATE, SAL)
VALUES(1000, ’LION’, ’SALES’, SYSDATE, 5000);

-- INSERT문을 실행되기 전까지의 급여 평균이 출력됩니다. 
급여 평균 : 2073.214


1 개의 행이 만들어졌습니다.
 /////////////////////////////////////////////
================================================ 
    * 데이터베이스 정보공유 커뮤니티 oracleclub.com 
    * 강좌 작성자 : 김정식 (oramaster _at_ naver.com)
================================================ 
 
 create or replace trigger salChange
 before insert or delete or update on emp
 for each row
 when new.empno>0
 declare
   sal_diff number;
 begin
	sal_dff := :new.sal- :old.sal;
	dbms_output.put_line('이전 급여: '||:old.sal);
	dbms_output.put_line('이후 급여: '||:new.sal);
	dbms_output.put_line('급여 차액: '||sal_dff);

 end;