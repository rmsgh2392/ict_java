
# 커서의 개념
커서란? - 질의 결과 얻어진 여러 행이 저장된 메모리상의 위치
	  여러 행을 처리하기 위해서는 명시적 커서를 사용하여
	  커서를정의하고 열고 커서를 이용하여 데이터를 읽고 닫을 수 있다.


1. 커서의 종류

1) 암시적 커서 : 모든 DML과 PL/SQL SELECT문에 대해 선언됩니다.
2) 명시적 커서 : 프로그래머에 의해 선언되며 이름이 있는 커서입니다. 
 

[1] 암시적인 커서[IMPLICIT CURSOR]

암시적인 커서는 오라클이나 PL/SQL실행 메커니즘에 
의해 처리되는 SQL문장이 처리되는 곳에 대한 익명의 에드레스다. 
오라클 데이터 베이스에서 실행되는 모든 SQL문장은 
암시적인 커서이며 그것들과 함께 모든 암시적인 커서 속성이 사용될 수 있습니다.

sql커서를 제어하기 위해 open,fetch,close를 
사용할 수 없지만
가장 최근에 실행된 sql문장에 대한 정보를 
얻기 위한 커서 속성-
(sql%rowcount, sql%found, sql%notfound, sql%isopen 등)
을 사용할 수
있다.

 -암시적 커서의 속성 

◈ SQL%ROWCOUNT : 해당 SQL 문에 영향을 받는 행의 수 
◈ SQL%FOUND : 해당 SQL 영향을 받는 행의 수가 1개 이상일 경우 TRUE 
◈ SQL%NOTFOUND : 해당 SQL 문에 영향을 받는 행의 수가 없을 경우 TRUE 
◈ SQL%ISOPEN : 항상 FALSE, 암시적 커서가 열려 있는지의 여부 검색 

(암시적 커서는 SQL 문이 실행되는 순간 자동으로 
열림과 닫힘 실행) 
 

암시적 커서 예제

CREATE OR REPLACE PROCEDURE Implicit_Cursor
(p_empno emp.empno%TYPE)

is

v_sal  emp.sal%TYPE;
v_update_row NUMBER;

BEGIN

SELECT sal
INTO v_sal
FROM emp
WHERE empno = p_empno ;

-- 검색된 데이터가 있을경우
IF  SQL%FOUND THEN     

    DBMS_OUTPUT.PUT_LINE(’검색한 데이터가 존재합니다 : ’||v_sal);

END IF;

UPDATE emp
SET sal = sal*1.1
WHERE empno = p_empno;

-- 수정한 데이터의 카운트를 변수에 저장
v_update_row := SQL%ROWCOUNT;

DBMS_OUTPUT.PUT_LINE(’급여가 인상된 사원 수 : ’|| v_update_row);

END;

프로시저가 생성되었습니다. 


SQL> SET SERVEROUTPUT ON ;  
-- (DBMS_OUTPUT.PUT_LINE을 출력하기 위해 사용)
SQL> EXECUTE Implicit_Cursor(7369);

검색한 데이터가 존재합니다 : 880
급여가 인상된 사원 수 : 1

PL/SQL 처리가 정상적으로 완료되었습니다.
/////////////////////////////////////////////////////////////

[2] 명시적 커서(EXPLICIT CURSOR) 
 
 
▣ Explicit Cursor의 흐름도?

						   +----------------------+	
						  ▼			  | NO		yes

Declare		--> OPEN		-->	FETCH		--->	EMPTY?		--->	CLOSE
이름있는 SQL	  커서의			커서의 현재		현재행 존재여부		커서가 사용한
영역 생성	  활성화			행을 해당 변수에	검사. 없으면		자원을 해제
							넘김		FETCH하지 않음
▣ 문법(Syntax)				

	Cursor is cursor_name IS
	SELECT 문장


▣ 커서 열기(OPEN) 

◈커서의 열기는 OPEN문을 사용합니다. 
◈커서안의 검색이 실행되며 아무런 
  데이터행을 추출하지 못해도 
   에러가 발생하지 않습니다.

    OPEN   cursor_name;


▣ 커서 패치(FETCH)

◈커서의 FETCH는 현재 데이터 행을
  OUTPUT변수에 반환합니다. 
◈커서의 SELECT문의 컬럼의 수와 OUTPUT변수의 수가 동일해야 합니다.
◈커서 컬럼의 변수의 타입과 
  OUTPUT변수의 데이터 타입도 동일해야 합니다.
◈커서는 한 라인씩 데이터를 패치 합니다.

    FETCH   cursor_name INTO {variable1[, variable2,...] | record_name};

    - fetch문장은 다음 작업을 수행한다.
    1) 활성셋에서 다음행으로 포인터를 이동한다.
    2) 현재 행에 대한 정보를 출력 pl/sql변수로 읽어들인다.
    3) 포인터가 활성셋의 끝에 위치하면 
       커서는 for loop를 빠져 나온다.


▣ 커서 닫기(CLOSE) 

◈사용을 맞친 커서는 반드시 닫아 주어야 합니다.
◈필요하다면 커서를 다시 열 수 있습니다.
◈커서를 닫은 상태에서 FETCH를 할 수 없습니다.

 CLOSE   cursor_name;

 
 -[실습]------------------------------------------------------------
create or replace procedure empsel
is
vno emp.empno%type:=0;
vname emp.ename%type:=null;
vsal emp.sal%type:=0;
vdate emp.hiredate%type;
begin
select empno,ename,sal,hiredate
into vno,vname,vsal,vdate from emp;
end;
/
 -----------------------------------------------------------------
위의 프로시저는 잘 생성되나 실행하면 '실제 인출은 요구된 것 보다 많은 수의 행을 추출합니다'
로 나옴.
여러개의 행을 vname,vno 등의 scalar 타입 변수에 저장할 수 없으므로.
scalar 타입 변수는 하나의 값만 저장 가능하다.

/////////////////////////////////////
==> 커서를 이용하여 질의 수행결과 반환되는 여러 행을 처리할 수 있다.
     오러클의 커서는 질의 결과 얻어진 어러 행이 저장된 메모리상의 위치를 나타낸다.
아래와 같이 수정--->그전에 sqlplus에서 set serveroutput on 명령어를 실행해놓자.
그래야 dbms_output.put_line()을 할 수 있음

 -----------------------------------------------------------------
create or replace procedure empsel
(pno in emp.empno%type)
is
vno emp.empno%type:=0;
vname emp.ename%type:=null;
vsal emp.sal%type:=0;
vdate emp.hiredate%type;
cursor emp_cr is
select empno,ename,sal,hiredate from emp
where empno=pno;
begin
open emp_cr;
fetch emp_cr into
vno,vname,vsal,vdate;
dbms_output.put_line(vno||vname||vsal||vdate);
close emp_cr;
end;
/

//////////////////////////////////////
exec empsel(1); 으로 실행
 -----------------------------------------------------------------

 
 모두 select해서 가져오려면 loop를 이용하자.
 -----------------------------------------------------------------
create or replace procedure empselAll
is
vno emp.empno%type:=0;
vname emp.ename%type:=null;
vsal emp.sal%type:=0;
vdate emp.hiredate%type;
cursor emp_cr is
select empno,ename,sal,hiredate from emp;
begin
open emp_cr;
LOOP
fetch emp_cr into
vno,vname,vsal,vdate;
EXIT WHEN emp_cr%NOTFOUND;
dbms_output.put_line(vno||'  '||
rpad(vname,10,' ')||lpad(vsal,10,' ')||'  '||vdate);
END LOOP;
close emp_cr;
end;
/
-----------------------------------------------------------
exec empselall; 으로 실행
-----------------------------------------------------------
 

 Explicit Cursor 예제
특정 부서의 평균급여와 사원수를 출력..
-----------------------------------------------------------
SQL>CREATE OR REPLACE PROCEDURE ExpCursor_Test 
        (v_deptno   dept.deptno%TYPE)
        IS

        CURSOR dept_avg IS
        SELECT b.dname, COUNT(a.empno) cnt, ROUND(AVG(a.sal),3) salary
        FROM emp a, dept b
        WHERE a.deptno = b.deptno
            AND b.deptno = v_deptno
        GROUP BY b.dname ;
 
        -- 커서를 패치하기 위한 편수 선언
         v_dname   dept.dname%TYPE;
         emp_cnt    NUMBER;
         sal_avg     NUMBER;

      BEGIN

        -- 커서의 오픈
        OPEN dept_avg;

        -- 커서의 패치 
        FETCH dept_avg INTO v_dname, emp_cnt, sal_avg;
    
           DBMS_OUTPUT.PUT_LINE(’부서명 : ’ || v_dname);
           DBMS_OUTPUT.PUT_LINE(’사원수 : ’ || emp_cnt);
           DBMS_OUTPUT.PUT_LINE(’평균급여 : ’ || sal_avg);

       -- 커서의 CLOSE
       CLOSE dept_avg;      
 
     EXCEPTION

       WHEN OTHERS THEN

         DBMS_OUTPUT.PUT_LINE(SQLERRM||’에러 발생 ’);

     END;
     /

프로시져가 생성되었습니다. 
-----------------------------------------------------------
실행 결과 
SQL> SET SERVEROUTPUT ON ; -- (DBMS_OUTPUT.PUT_LINE을 출력하기 위해 사용)

SQL> EXECUTE ExpCursor_Test(30);
부서명 : SALES
사원수 : 6
평균급여 : 1550.833

PL/SQL 처리가 정상적으로 완료되었습니다.
 
///////////////////////////////////////////////////////// 
FOR문에서 커서 사용(Cursor FOR Loops)  

-구문
FOR record_name IN cursor_name LOOP
	statement1;
	statement2;
	....
END LOOP;

record_name : 암시적으로 선언된 RECORD이름
cursor_name : 선언되어 있는 CURSOR이름
 
◈ FOR문을 사용하면 커서의 OPEN, FETCH, CLOSE가 
   자동 발생하므로 따로 기술할 
    필요가 없습니다
◈ 레코드 이름도 자동 선언되므로 
   따로 선언할 필요가 없습니다.


 
 FOR문에서 커서 사용 예제
 --------------------------------------------------
create or replace procedure forcur_test
is
cursor dcursor is
select * from dept order by deptno;
begin
dbms_output.put_line('부서번호'||'  부서명'||'  위치');
for drecord in dcursor loop
dbms_output.put_line(lpad(drecord.deptno,2)||'  '
||rpad(drecord.dname,15)||rpad(drecord.loc,12));
end loop;
end;
/
 --------------------------------------------------
 set serveroutput on
 exec forcur_test;
 --------------------------------------------------
[문제]
부서별 사원수와 급여 합계를 구하는 프로시저를 만들어보세요.

create or replace procedure forcur_test
is
cursor dcr is
select b.dname, count(a.empno) cnt, sum(a.sal) salary
from emp a, dept b
where a.deptno=b.deptno
group by b.dname;
begin
dbms_output.put_line('부서명'||'  사원수'||'  급여합계');
for dlist in dcr loop
dbms_output.put_line(rpad(dlist.dname,12)||'  '||lpad(dlist.cnt,3)||lpad(dlist.salary,6));
end loop;
end;
/


create or replace procedure forcur_test
is
cursor dcr is
select b.dname, count(a.empno) cnt, sum(a.sal) salary
from emp a, dept b
where a.deptno=b.deptno
group by b.dname;
begin
dbms_output.put_line(rpad('부서명',12)||lpad('사원수',10)||lpad('급여합계',12));
for dlist in dcr loop
dbms_output.put_line(rpad(dlist.dname,12)||'  '||lpad(dlist.cnt,10)||lpad(dlist.salary,10));
end loop;
exception
when others then
dbms_output.put_line('에러발생');
end;
/


프로시져가 생성되었습니다. 
------------------------------------------------
실행 결과 
SQL> SET SERVEROUTPUT ON ; -- (DBMS_OUTPUT.PUT_LINE을 출력하기 위해 사용)

SQL> EXECUTE forcur_test;

 
///////////////////////////////////////////////////////////
SUBQUERY를 사용한 CURSOR FOR LOOP

- PL/SQL이 SUBQUERY를 치환하도록 하기 때문에 CURSOR는 선언할 필요가 없다.
- 문법(SYNTAX)

	FOR record_name IN (SUBQUERY) LOOP
		statement1;
		statement2;
		....
	END LOOP;
--------------------------------------
DECLARE
BEGIN
DBMS_OUTPUT.PUT_LINE('부서번호    부서명    위치');
DBMS_OUTPUT.PUT_LINE('--------------------------------');

FOR drecr IN (SELECT * FROM DEPT ORDER BY DEPTNO) LOOP
DBMS_OUTPUT.PUT_LINE(DRECR.DEPTNO||'  '||DRECR.DNAME||'  '||DRECR.LOC);
END LOOP;
END;
/
---------------------------------------------------
///////////////////////////////////////////////////////////////////////////////
#예외(Exception)
 
◈ 오라클 PL/SQL의 오류를 예외라고 부릅니다. 

◈ 오류는 PL/SQL을 컴파일 할때 문법적인 
    오류로 발생하는 컴파일 타임 오류와, 
    프로그램을 실행할때 발생하는 실행타임 오류로 
    구분할수 있습니다.  
 ▣ 예외(Exception)란?
 
 
▣ PL/SQL오류의 종류
 ------------------------------------------------------------------------------------------------

	 예  외						설  명					처  리
 ------------------------------------------------------------------------------------------------

 미리 정의된 오라클 서버 오류		   PL/SQL에서 자주 발생하는		 선언할 필요도 없고, 발생시에 
 (Predefined Oracle Server)		     약20개의 오류			예외 절로 자동 트랩(Trap)된다.

 ------------------------------------------------------------------------------------------------
 
  미리 정의되지 않은 오라클			미리 정의된 오라클 서버		선언부에서 선언해야 하고 발생시 
  서버 오류 						오류를 제외한              	자동 트랩된다.                         
  (Non-Predefined Oracle   Server) 		모든 오류                        
 ------------------------------------------------------------------------------------------------
 
  사용자 정의 오류				 개발자가 정한 조건에		 선언부에서 선언하고 실행부에서
  (User-Defined) 					만족하지 않을경우        RAISE문을 사용하여 발생시켜야 
 							발생하는 오류              한다                                     

 ------------------------------------------------------------------------------------------------
  


▣ Execption 문법(Syntax)

Exception
WHEN 예외1 [or 예외2] THEN
	statement1
	statement2...
WHEN 예외3 THEN
	statement3
WHEN OTHERS THEN
	statement4



◈ WHEN OTHERS절은 맨 마지막에 옵니다. 

◈ 예외 처리절은 EXCEPTION부터 시작합니다. 

◈ 예외가 발생하면 여러 개의 예외 처리부 
중에 하나의 예외 처리부에 트랩(Trap)됩니다. 

/////////////////////////////////////////////////////////////////
미리 정의된 예외(Predefined Exceptions) 
 
  
◈ 오라클 PL/SQL은 자주 일어나는 몇가지 예외를 미리 정의해 놓았으며, 
      이러한 예외는 개발자가 따로 선언할 필요가 없습니다 
  
▣ 미리정의된 예외

◈ NO_DATA_FOUND : SELECT문이 아무런 데이터 행을 
		반환하지 못할때 

◈ TOO_MANY_ROWS : 하나만 리턴해야하는 
		SELECT문이 하나 이상의 행을 반환할 때 

◈ ZERO_DIVIDE 0으로 나눌때 

◈ DUP_VAL_ON_INDEX : 
   UNIQUE 제약을 갖는 컬럼에 중복되는 데이터가 
   INSERT될때 

   이 외에도 몇 개가 더 있습니다. :I
    
----[미리 정의된 예외 예제 실습1]---------------
CREATE OR REPLACE PROCEDURE NODATA
(VNO IN EMP.EMPNO%TYPE)
IS
VENAME EMP.ENAME%TYPE;
BEGIN
SELECT ENAME INTO VENAME FROM EMP
WHERE EMPNO=VNO;
DBMS_OUTPUT.PUT_LINE(VNO||'번 사원은 '||VENAME);
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE(VNO||'번 사원은 없어요');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERROR: '||SQLCODE||SQLERRM);
END;
/

SET SERVEROUTPUT ON
EXEC NODATA(7901);

------------------------------------------
----[미리 정의된 예외 예제 실습2]------------
create or replace procedure pre_test
(vdeptno in emp.empno%type)
is
vemp emp%rowtype;
begin
select empno,ename,deptno
INTO vemp.empno,vemp.ename,
vemp.deptno
from emp
where deptno=vdeptno;
dbms_output.put_line('사번'||vemp.empno);
dbms_output.put_line('이름'||vemp.ename);
dbms_output.put_line('부서'||vemp.deptno);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
dbms_output.put_line('DUP_VAL_ON_INDEX: '||'데이터가 존재합니다');
WHEN TOO_MANY_ROWS THEN
dbms_output.put_line('TOO_MANY_ROWS: '||'데이터가 많아요');
WHEN NO_DATA_FOUND THEN
dbms_output.put_line('TOO_MANY_ROWS');
WHEN OTHERS THEN
dbms_output.put_line('기타 에러');
end;
/
--------------------------------------------
프로시저 실행
SQL> SET SERVEROUTPUT ON ;  -- (DBMS_OUTPUT.PUT_LINE을 출력하기 위해 사용)

SQL> EXECUTE Pre_Test(20);
TOO_MANY_ROWS에러 발생
------------------------------------------------

※ TOO_MANY_ROWS에러를 타는 이유?

 - SELECT문의 결과가 1개 이상의 행을 리턴하기 때문이다..
 - TOO_MANY_ROWS를 피하기 위해서는 
   FOR문이나 LOOP문으로 SELECT문을 처리해야 합니다.

아래와 같이 바꾸면 에러가 발생하지 않습니다.


     FOR  emp_list  IN
         (SELECT empno, ename, deptno
         FROM emp
         WHERE deptno = v_deptno)   LOOP

         DBMS_OUTPUT.PUT_LINE(’사번 : ’ || emp_list.empno);
         DBMS_OUTPUT.PUT_LINE(’이름 : ’ || emp_list.ename);
         DBMS_OUTPUT.PUT_LINE(’부서번호 : ’ || emp_list.deptno);
 
     END LOOP;
    WHEN OTHERS   THEN 
 
////////////////////////////////////////////////////////// 